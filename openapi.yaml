swagger: "2.0"
info:
  title: SysML-v2-API-Services
  description: A REST API for SysML v2.
  version: 1.0.0
tags:
- name: elements
- name: relationships
- name: models
paths:
  /element:
    get:
      tags:
      - elements
      operationId: getElements
      summary: Gets a list of all elements.
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Element'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
    post:
      tags:
      - elements
      operationId: createElement
      summary: Adds a new element
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Element'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Element'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /elements/{id}:
    parameters:
    - name: id
      in: path
      description: The id of an element
      type: string
      required: true
    get:
      tags:
      - elements
      operationId: getElement
      summary: Returns the element with the specified id.
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Element'
        404:
          $ref: '#/responses/NotFound'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /relationship:
    get:
      tags:
      - relationships
      operationId: getRelationships
      summary: Gets a list of all Relationships.
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Relationship'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
    post:
      tags:
      - relationships
      operationId: createRelationship
      summary: Adds a new relationship.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Relationship'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Relationship'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /relationship/{id}:
    parameters:
    - name: id
      in: path
      description: The id of a relationship.
      type: string
      required: true
    get:
      tags:
      - relationships
      operationId: getRelationship
      summary: Gets the relationship with the specified id.
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Relationship'
        404:
          $ref: '#/responses/NotFound'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /relationship/element/{element_id}:
    parameters:
    - name: element_id
      in: path
      description: The element id on either side of a relationship.
      type: string
      required: true
    get:
      tags:
      - relationships
      operationId: getRelationshipsByElement
      summary: Gets all relationships with a given element id on either side.
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Relationship'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /relationship/source/{source_id}:
    parameters:
    - name: source_id
      in: path
      description: The source side id of a relationship.
      type: string
      required: true
    get:
      tags:
      - relationships
      operationId: getRelationshipsBySource
      summary: Gets all relationships with a given source element id.
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Relationship'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /relationship/target/{target_id}:
    parameters:
    - name: target_id
      in: path
      description: The target side id of a relationship.
      type: string
      required: true
    get:
      tags:
      - relationships
      operationId: getRelationshipsByTarget
      summary: Gets all relationships with a given target element id.
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Relationship'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'

  /model:
    get:
      tags:
      - models
      operationId: getModels
      summary: Gets a list of all models.
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Model'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
    post:
      tags:
      - models
      operationId: createModel
      summary: Adds a new model.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/Model'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Model'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /model/{id}:
    parameters:
    - name: id
      in: path
      description: The id of a model
      type: string
      required: true
    get:
      tags:
      - models
      operationId: getModel
      summary: Get a model by its id.
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Model'
        404:
          $ref: '#/responses/NotFound'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /element/{element_id}/model/{model_id}:
    parameters:
    - name: model_id
      in: path
      description: The id of the model to search within.
      type: string
      required: true
    - name: element_id
      in: path
      description: The id of the element.
      type: string
      required: true
    get:
      tags:
      - elements
      operationId: getElementInModel
      summary: Gets a specific element within the specified model.
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Element'
        404:
          $ref: '#/responses/NotFound'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
definitions:
  Element:
    type: object
    properties:
      identifier:
        type: string
        format: uuid
      name:
        type: string
      description:
        type: string
      parent_model:
        type: string
        format: uuid
      type:
        type: string
  Relationship:
    type: object
    allOf:
    - $ref: '#/definitions/Element'
    - properties:
        source_element_role:
          type: string
        source_element:
          type: string
          format: uuid
        target_element_role:
          type: string
        target_element:
          type: string
          format: uuid
  Model:
    type: object
    properties:
      identifier:
        type: string
        format: uuid
      name:
        type: string
      description:
        type: string
  Error:
    type: object
    properties:
      error:
        type: string
responses:
  NoContent:
    description: No Content
  Ok:
    description: Ok
  BadContentType:
    description: The requested content type is not acceptable.
    schema:
      $ref: '#/definitions/Error'
  NotFound:
    description: Not found.
  InternalServerError:
    description: Internal server error.
    schema:
      $ref: '#/definitions/Error'
  Default:
    description: Unexpected response.