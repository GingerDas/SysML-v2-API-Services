swagger: "2.0"
info:
  title: SysML v2 API and Services
  description: REST/HTTP binding (PSM) for the SysML v2 standard API.
  version: 1.0.0
tags:
  - name: Model
  - name: Element
  - name: Relationship

paths:
  /models:
    get:
      tags:
        - Model
      operationId: getModels
      summary: Get all models
      produces:
        - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Model'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
    post:
      tags:
        - Model
      operationId: createModel
      summary: Add a new model
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Model'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Model'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /models/{identifier}:
    parameters:
      - name: identifier
        in: path
        description: ID of the model
        type: string
        required: true
    get:
      tags:
        - Model
      operationId: getModel
      summary: Get model by its ID
      produces:
        - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Model'
        404:
          $ref: '#/responses/NotFound'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'


  /elements:
    get:
      tags:
        - Element
      operationId: getElements
      summary: Get all elements
      produces:
        - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Element'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
    post:
      tags:
        - Element
      operationId: createElement
      summary: Add a new element
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Element'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Element'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /elements/{identifier}:
    parameters:
      - name: identifier
        in: path
        description: ID of the element
        type: string
        required: true
    get:
      tags:
        - Element
      operationId: getElement
      summary: Get element by its ID
      produces:
        - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Element'
        404:
          $ref: '#/responses/NotFound'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /models/{model_identifier}/elements/{element_identifier}:
    parameters:
      - name: element_identifier
        in: path
        description: ID of the element
        type: string
        required: true
      - name: model_identifier
        in: path
        description: ID of the model
        type: string
        required: true
    get:
      tags:
        - Element
      operationId: getElementByModelAndId
      summary: Get element by model ID and its ID
      produces:
        - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Element'
        404:
          $ref: '#/responses/NotFound'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /models/{model_identifier}/elements:
    parameters:
      - name: model_identifier
        in: path
        description: ID of the model
        type: string
        required: true
    get:
      tags:
        - Element
      operationId: getElementsInModel
      summary: Get all elements in the model
      produces:
        - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Element'
        404:
          $ref: '#/responses/NotFound'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'

  /relationships:
    get:
      tags:
        - Relationship
      operationId: getRelationships
      summary: Get all relationships
      produces:
        - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Relationship'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
    post:
      tags:
        - Relationship
      operationId: createRelationship
      summary: Add a new relationship
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Relationship'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Relationship'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  /relationships/{identifier}:
    parameters:
      - name: identifier
        in: path
        description: ID of the relationship
        type: string
        required: true
    get:
      tags:
        - Relationship
      operationId: getRelationship
      summary: Get relationship by its ID
      produces:
        - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Relationship'
        404:
          $ref: '#/responses/NotFound'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'
  # /relationships/elements/{element_identifier}:
  #   parameters:
  #     - name: element_identifier
  #       in: path
  #       description: ID of the element that is the source or target of relationships
  #       type: string
  #       required: true
  #   get:
  #     tags:
  #       - Relationship
  #     operationId: getRelationshipsByElement
  #     summary: Get all relationships with the given element as either source or target
  #     produces:
  #       - application/json
  #     responses:
  #       200:
  #         description: Ok
  #         schema:
  #           type: array
  #           items:
  #             $ref: '#/definitions/Relationship'
  #       415:
  #         $ref: '#/responses/BadContentType'
  #       500:
  #         $ref: '#/responses/InternalServerError'
  #       default:
  #         $ref: '#/responses/Default'
  # /relationship/source/{source_identifier}:
  #   parameters:
  #     - name: source_identifier
  #       in: path
  #       description: ID of the element that is the source of relationships
  #       type: string
  #       required: true
  #   get:
  #     tags:
  #       - Relationship
  #     operationId: getRelationshipsBySource
  #     summary: Get all relationships with the given element as the source
  #     produces:
  #       - application/json
  #     responses:
  #       200:
  #         description: Ok
  #         schema:
  #           type: array
  #           items:
  #             $ref: '#/definitions/Relationship'
  #       415:
  #         $ref: '#/responses/BadContentType'
  #       500:
  #           $ref: '#/responses/InternalServerError'
  #       default:
  #           $ref: '#/responses/Default'
  # /relationship/target/{target_identifier}:
  #     parameters:
  #       - name: target_identifier
  #         in: path
  #         description: ID of the element that is the target of relationships
  #         type: string
  #         required: true
  #     get:
  #       tags:
  #         - Relationship
  #       operationId: getRelationshipsByTarget
  #       summary: Get all relationships with the given element as the target
  #       produces:
  #         - application/json
  #       responses:
  #         200:
  #           description: Ok
  #           schema:
  #             type: array
  #             items:
  #               $ref: '#/definitions/Relationship'
  #         415:
  #           $ref: '#/responses/BadContentType'
  #         500:
  #           $ref: '#/responses/InternalServerError'
  #         default:
  #           $ref: '#/responses/Default'
  /models/{model_identifier}/relationships:
    parameters:
      - name: model_identifier
        in: path
        description: ID of the model
        type: string
        required: true
    get:
      tags:
        - Relationship
      operationId: getRelationshipsByModel
      summary: Get all relationships in the model
      produces:
        - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Relationship'
        415:
          $ref: '#/responses/BadContentType'
        500:
          $ref: '#/responses/InternalServerError'
        default:
          $ref: '#/responses/Default'

definitions:
  Model:
    type: object
    allOf:
      - $ref: '#/definitions/Identified'
    properties:
      '@type':
        type: string
      name:
        type: string
  Element:
    type: object
    allOf:
      - $ref: '#/definitions/Identified'
    properties:
      containingModel:
        $ref: '#/definitions/Identified'
      '@type':
        type: string
    additionalProperties:
      type: object
  Relationship:
    type: object
    allOf:
      - $ref: '#/definitions/Element'
      - properties:
          source:
            type: array
            items:
              $ref: '#/definitions/Identified'
          target:
            type: array
            items:
              $ref: '#/definitions/Identified'
  Identified:
    type: object
    properties:
      identifier:
        type: string
        format: uuid
  Error:
    type: object
    properties:
      error:
        type: string
responses:
  NoContent:
    description: No Content
  Ok:
    description: Ok
  BadContentType:
    description: The requested content type is not acceptable.
    schema:
      $ref: '#/definitions/Error'
  NotFound:
    description: Not found.
  InternalServerError:
    description: Internal server error.
    schema:
      $ref: '#/definitions/Error'
  Default:
    description: Unexpected response.